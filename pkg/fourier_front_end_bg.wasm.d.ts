/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_shape_free(a: number): void;
export function shape_new(a: number, b: number): number;
export function shape_begin_shape(a: number, b: number, c: number): void;
export function shape_vertex(a: number, b: number, c: number): void;
export function shape_move_to(a: number, b: number, c: number): void;
export function shape_end_shape(a: number): void;
export function shape_set_line_width(a: number, b: number): void;
export function shape_set_stroke_style(a: number, b: number): void;
export function __wbg_canvas_free(a: number): void;
export function canvas_new(a: number, b: number): number;
export function canvas_width(a: number): number;
export function canvas_height(a: number): number;
export function canvas_line(a: number, b: number, c: number, d: number, e: number): void;
export function canvas_move_to(a: number, b: number, c: number): void;
export function canvas_circle(a: number, b: number, c: number, d: number): void;
export function canvas_clear(a: number): void;
export function canvas_arc(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function canvas_translate(a: number, b: number, c: number): void;
export function canvas_scale(a: number, b: number, c: number): void;
export function canvas_set_line_width(a: number, b: number): void;
export function __wbg_spectrum_free(a: number): void;
export function spectrum_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function spectrum_frequency(a: number, b: number): void;
export function spectrum_real(a: number, b: number): void;
export function spectrum_imaginary(a: number, b: number): void;
export function spectrum_amplitude(a: number, b: number): void;
export function spectrum_phase(a: number, b: number): void;
export function compute_spectrum(a: number, b: number): number;
export function compute_spectrum_js(a: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
